import { NextRequest, NextResponse } from "next/server"
import { adminDb } from "@/lib/firebase-admin"
import { CommissionTransaction, User, AffiliateSettings } from "@/lib/types"
import { FieldValue } from "firebase-admin/firestore"

export async function POST(request: NextRequest) {
  try {
    const { depositId, userId, amount } = await request.json()
    console.log("üîç API Comiss√£o - Recebido:", { depositId, userId, amount })

    if (!depositId || !userId || !amount) {
      console.log("‚ùå Dados obrigat√≥rios faltando")
      return NextResponse.json(
        { error: "Dados obrigat√≥rios faltando" },
        { status: 400 }
      )
    }

    // Buscar dados do usu√°rio que fez o dep√≥sito
    const userDoc = await adminDb.collection("users").doc(userId).get()
    if (!userDoc.exists) {
      return NextResponse.json(
        { error: "Usu√°rio n√£o encontrado" },
        { status: 404 }
      )
    }

    const userData = userDoc.data() as User
    console.log("üë§ Dados do usu√°rio:", { 
      name: userData.name, 
      referredBy: userData.referredBy,
      hasReferredBy: !!userData.referredBy 
    })
    
    // Verificar se o usu√°rio foi indicado por algu√©m
    if (!userData.referredBy) {
      console.log("‚ùå Usu√°rio n√£o foi indicado por ningu√©m")
      return NextResponse.json(
        { message: "Usu√°rio n√£o foi indicado por ningu√©m" },
        { status: 200 }
      )
    }

    // Buscar o afiliado que indicou
    console.log("üîé Buscando afiliado com c√≥digo:", userData.referredBy)
    const affiliatesSnapshot = await adminDb.collection("users")
      .where("affiliateCode", "==", userData.referredBy)
      .get()
    
    console.log("üìä Afiliados encontrados:", affiliatesSnapshot.size)
    
    if (affiliatesSnapshot.empty) {
      console.log("‚ùå Afiliado indicador n√£o encontrado")
      return NextResponse.json(
        { error: "Afiliado indicador n√£o encontrado" },
        { status: 404 }
      )
    }

    const affiliateDoc = affiliatesSnapshot.docs[0]
    const affiliateData = affiliateDoc.data() as User
    console.log("üíº Dados do afiliado:", { 
      name: affiliateData.name, 
      id: affiliateDoc.id,
      affiliateCode: affiliateData.affiliateCode,
      customCommissionRate: affiliateData.customCommissionRate
    })

    // Buscar configura√ß√µes de comiss√£o
    const settingsDoc = await adminDb.collection("settings").doc("affiliate").get()
    let globalCommissionRate = 5 // Padr√£o
    
    if (settingsDoc.exists) {
      const settings = settingsDoc.data() as AffiliateSettings
      if (!settings.isActive) {
        return NextResponse.json(
          { message: "Sistema de comiss√µes est√° desativado" },
          { status: 200 }
        )
      }
      globalCommissionRate = settings.globalCommissionRate
    }

    // Determinar a taxa de comiss√£o (personalizada ou global)
    const commissionRate = affiliateData.customCommissionRate ?? globalCommissionRate
    const commissionAmount = (amount * commissionRate) / 100

    console.log("üí∞ C√°lculo da comiss√£o:", {
      globalCommissionRate,
      customCommissionRate: affiliateData.customCommissionRate,
      commissionRate,
      depositAmount: amount,
      commissionAmount
    })

    // Criar transa√ß√£o de comiss√£o
    const commissionTransaction: Omit<CommissionTransaction, 'id'> = {
      affiliateId: affiliateDoc.id,
      affiliateName: affiliateData.name,
      referredUserId: userId,
      referredUserName: userData.name,
      depositId,
      depositAmount: amount,
      commissionRate,
      commissionAmount,
      status: "pending",
      createdAt: new Date()
    }

    // Salvar transa√ß√£o no banco
    const transactionRef = adminDb.collection("commissionTransactions").doc()
    await transactionRef.set(commissionTransaction)
    console.log("üíæ Transa√ß√£o de comiss√£o salva:", transactionRef.id)

    // Atualizar total de comiss√µes do afiliado
    await adminDb.collection("users").doc(affiliateDoc.id).update({
      totalCommission: FieldValue.increment(commissionAmount)
    })
    console.log("‚úÖ Total de comiss√µes do afiliado atualizado")

    return NextResponse.json({
      success: true,
      commissionAmount,
      commissionRate,
      transactionId: transactionRef.id
    })

  } catch (error) {
    console.error("Erro ao calcular comiss√£o:", error)
    return NextResponse.json(
      { error: "Erro interno do servidor" },
      { status: 500 }
    )
  }
}
